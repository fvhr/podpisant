services:
  db:
    image: postgres:17
    container_name: podpisant.db
    command: -p 5432
    expose:
      - 5432
    restart: always
    env_file:
      - .env
    volumes:
      - db-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 10s
      timeout: 60s
      retries: 5
      start_period: 10s

  redis:
    image: redis:7
    container_name: redis
    command: ["redis-server", "--port", "6379", "--save", "60", "1", "--appendonly", "yes"]
    ports:
      - "6379:6379"
    expose:
      - 6379
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s

  api:
    env_file:
      - .env
    build:
      context: backend
      dockerfile: Dockerfile
#    image: menoitami/podpisant.api:latest
    command: [ "sh", "/podpisant.api/docker/serve.sh" ]
    expose:
      - 8000
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8000:8000"
    volumes:
      - ./certs:/backend-service.auth_service/certs

#  nats:
#    image: nats
#    ports:
#      - "8222:8222"
#      - "6222:6222"
#      - "4222:4222"
#    command: "--cluster_name NATS --cluster nats://0.0.0.0:6222 --http_port 8222 --port 4222"

#  notification_app:
#    env_file:
#      - notification/.env
#      - .env # для удобства в этом файле первостепенно в проде скорее всего лучше по 1 файлу указывать
#    image: menoitami/podpisant.notification_app
##    build:
##      context: notification/
#    command: [ "sh", "/notification_app/docker/app.sh" ]
#    depends_on:
#      - nats

  db_migration:
    profiles: [ "setup", "migration" ]
    container_name: podpisant.db_migration
    image: menoitami/podpisant.api
    restart: on-failure
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env
    command: [ "sh", "/backend-service.auth_service/docker/migrate.sh" ]

#  minio:
#    image: minio/minio
#    container_name: minio
#    ports:
#      - "9000:9000"
#      - "9001:9001"
#    environment:
#      MINIO_ROOT_USER: minio-key
#      MINIO_ROOT_PASSWORD: 17471747
#      MINIO_SERVER_URL: http://minio.example.com:9000
#    volumes:
#      - ./minio-data:/data
#      - ./minio-config:/root/.minio
#    command: server /data --console-address ":9001"
#    restart: always
#    extra_hosts:
#      - "minio.example.com:127.0.0.1"
#
#  mc:
#    profiles: [ "setup" ]
#    image: minio/mc
#    depends_on:
#      - minio
#    environment:
#      - MINIO_ALIAS=myminio
#      - MINIO_URL=http://minio:9000
#      - MINIO_ACCESS_KEY=minio-key
#      - MINIO_SECRET_KEY=17471747
#      - BUCKET_NAME=avatars
##     mc policy set private $${MINIO_ALIAS}/$${BUCKET_NAME}
#    entrypoint: >
#      /bin/sh -c "
#      sleep 10;
#      mc alias set $${MINIO_ALIAS} $${MINIO_URL} $${MINIO_ACCESS_KEY} $${MINIO_SECRET_KEY};
#      mc mb $${MINIO_ALIAS}/$${BUCKET_NAME} || true;
#      mc policy set public $${MINIO_ALIAS}/$${BUCKET_NAME}
#      "

  nginx:
    image: nginx:latest
    container_name: nginx_app
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./app/conf.d:/etc/nginx/conf.d
      - ./certbot/conf:/etc/letsencrypt
      - ./nginx-logs:/var/log/nginx
      - ./certbot/www:/var/www/certbot:rw
      - ./static:/usr/share/nginx/html
      - ./certs:/etc/nginx/certs
      - ./app/options-ssl-nginx.conf:/etc/letsencrypt/options-ssl-nginx.conf
    depends_on:
      - api
      - db
      - redis
#      - certbot

#  certbot:
#    image: certbot/certbot
#    container_name: certbot_temp
#    volumes:
#      - ./certbot/conf:/etc/letsencrypt
#      - ./certbot/www:/var/www/certbot
#    depends_on:
#      - nginx
#    command: certonly --webroot -w /var/www/certbot -d menoitami.ru --email your@email.com --agree-tos --non-interactive

volumes:
  db-data:
  redis-data:
