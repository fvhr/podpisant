"""empty message

Revision ID: adfacb01c58f
Revises: 
Create Date: 2025-04-12 07:22:16.751349

"""
from typing import Sequence, Union
import os
from uuid import uuid4

from alembic import op
import sqlalchemy as sa
from dotenv import load_dotenv
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'adfacb01c58f'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('user',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('fio', sa.String(length=128), nullable=False),
    sa.Column('email', sa.String(length=128), nullable=False),
    sa.Column('telegram_id', sa.Integer(), nullable=True),
    sa.Column('phone', sa.String(length=20), nullable=True),
    sa.Column('is_super_admin', sa.Boolean(), nullable=False),
    sa.Column('type_notification', postgresql.ENUM('TG', 'EMAIL', 'PHONE', name='notification_type_enum'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email')
    )
    # ### end Alembic commands ###
    load_dotenv()
    admin_emails = os.getenv('API_ADMIN_EMAILS', '').split(',')
    if admin_emails:
        users = []
        for email in admin_emails:
            email = email.strip()
            if email:  # Пропускаем пустые email
                users.append({
                    'id': str(uuid4()),
                    'fio': 'Admin ' + email.split('@')[0].title(),
                    'email': email,
                    'is_super_admin': True,
                    'type_notification': 'EMAIL'
                })

        if users:
            op.bulk_insert(
                sa.table('user',
                    sa.column('id'),
                    sa.column('fio'),
                    sa.column('email'),
                    sa.column('telegram_id'),
                    sa.column('phone'),
                    sa.column('is_super_admin'),
                    sa.column('type_notification')
                ),
                users
            )


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('user')
    op.execute("DROP TYPE notification_type_enum")  # Удаляем ENUM тип
    # ### end Alembic commands ###